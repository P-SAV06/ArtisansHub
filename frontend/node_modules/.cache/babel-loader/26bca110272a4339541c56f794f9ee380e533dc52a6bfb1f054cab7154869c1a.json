{"ast":null,"code":"// Authentication utilities for Artisans Hub\n\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} - True if user is authenticated\r\n */\nexport const isAuthenticated = () => {\n  try {\n    const authData = localStorage.getItem('artisansHubAuth');\n    if (!authData) return false;\n    const auth = JSON.parse(authData);\n    const now = new Date().getTime();\n    const authTime = auth.timestamp;\n\n    // Session expires after 24 hours (86400000 ms)\n    const sessionDuration = 24 * 60 * 60 * 1000;\n    if (now - authTime > sessionDuration) {\n      localStorage.removeItem('artisansHubAuth');\n      return false;\n    }\n    return auth.isAuthenticated === true;\n  } catch (error) {\n    console.error('Error checking authentication:', error);\n    return false;\n  }\n};\n\n/**\r\n * Get current user information\r\n * @returns {object|null} - User object or null if not authenticated\r\n */\nexport const getCurrentUser = () => {\n  try {\n    if (!isAuthenticated()) return null;\n    const authData = localStorage.getItem('artisansHubAuth');\n    const auth = JSON.parse(authData);\n    return auth.user;\n  } catch (error) {\n    console.error('Error getting current user:', error);\n    return null;\n  }\n};\n\n/**\r\n * Log out the current user\r\n */\nexport const logout = () => {\n  localStorage.removeItem('artisansHubAuth');\n  localStorage.removeItem('intendedPage');\n};\n\n/**\r\n * Redirect to auth page if not authenticated\r\n * @param {string} intendedPage - Page user was trying to access\r\n * @returns {boolean} - True if user is authenticated, false if redirected\r\n */\nexport const requireAuth = (intendedPage = '/') => {\n  if (!isAuthenticated()) {\n    // Store the intended page for redirect after login\n    localStorage.setItem('intendedPage', intendedPage);\n    return false;\n  }\n  return true;\n};\n\n/**\r\n * Get user greeting with name\r\n * @returns {string} - Personalized greeting\r\n */\nexport const getUserGreeting = () => {\n  const user = getCurrentUser();\n  if (!user) return 'Welcome, Guest!';\n  const hour = new Date().getHours();\n  let timeGreeting = 'Hello';\n  if (hour < 12) {\n    timeGreeting = 'Good Morning';\n  } else if (hour < 17) {\n    timeGreeting = 'Good Afternoon';\n  } else {\n    timeGreeting = 'Good Evening';\n  }\n  const firstName = user.name.split(' ')[0];\n  return `${timeGreeting}, ${firstName}!`;\n};\nexport default {\n  isAuthenticated,\n  getCurrentUser,\n  logout,\n  requireAuth,\n  getUserGreeting\n};","map":{"version":3,"names":["isAuthenticated","authData","localStorage","getItem","auth","JSON","parse","now","Date","getTime","authTime","timestamp","sessionDuration","removeItem","error","console","getCurrentUser","user","logout","requireAuth","intendedPage","setItem","getUserGreeting","hour","getHours","timeGreeting","firstName","name","split"],"sources":["C:/Users/varma/New folder (3)/frontend/src/utils/auth.js"],"sourcesContent":["// Authentication utilities for Artisans Hub\r\n\r\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} - True if user is authenticated\r\n */\r\nexport const isAuthenticated = () => {\r\n  try {\r\n    const authData = localStorage.getItem('artisansHubAuth');\r\n    if (!authData) return false;\r\n    \r\n    const auth = JSON.parse(authData);\r\n    const now = new Date().getTime();\r\n    const authTime = auth.timestamp;\r\n    \r\n    // Session expires after 24 hours (86400000 ms)\r\n    const sessionDuration = 24 * 60 * 60 * 1000;\r\n    \r\n    if (now - authTime > sessionDuration) {\r\n      localStorage.removeItem('artisansHubAuth');\r\n      return false;\r\n    }\r\n    \r\n    return auth.isAuthenticated === true;\r\n  } catch (error) {\r\n    console.error('Error checking authentication:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get current user information\r\n * @returns {object|null} - User object or null if not authenticated\r\n */\r\nexport const getCurrentUser = () => {\r\n  try {\r\n    if (!isAuthenticated()) return null;\r\n    \r\n    const authData = localStorage.getItem('artisansHubAuth');\r\n    const auth = JSON.parse(authData);\r\n    return auth.user;\r\n  } catch (error) {\r\n    console.error('Error getting current user:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Log out the current user\r\n */\r\nexport const logout = () => {\r\n  localStorage.removeItem('artisansHubAuth');\r\n  localStorage.removeItem('intendedPage');\r\n};\r\n\r\n/**\r\n * Redirect to auth page if not authenticated\r\n * @param {string} intendedPage - Page user was trying to access\r\n * @returns {boolean} - True if user is authenticated, false if redirected\r\n */\r\nexport const requireAuth = (intendedPage = '/') => {\r\n  if (!isAuthenticated()) {\r\n    // Store the intended page for redirect after login\r\n    localStorage.setItem('intendedPage', intendedPage);\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * Get user greeting with name\r\n * @returns {string} - Personalized greeting\r\n */\r\nexport const getUserGreeting = () => {\r\n  const user = getCurrentUser();\r\n  if (!user) return 'Welcome, Guest!';\r\n  \r\n  const hour = new Date().getHours();\r\n  let timeGreeting = 'Hello';\r\n  \r\n  if (hour < 12) {\r\n    timeGreeting = 'Good Morning';\r\n  } else if (hour < 17) {\r\n    timeGreeting = 'Good Afternoon';\r\n  } else {\r\n    timeGreeting = 'Good Evening';\r\n  }\r\n  \r\n  const firstName = user.name.split(' ')[0];\r\n  return `${timeGreeting}, ${firstName}!`;\r\n};\r\n\r\nexport default {\r\n  isAuthenticated,\r\n  getCurrentUser,\r\n  logout,\r\n  requireAuth,\r\n  getUserGreeting\r\n};"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,eAAe,GAAGA,CAAA,KAAM;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IACxD,IAAI,CAACF,QAAQ,EAAE,OAAO,KAAK;IAE3B,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;IACjC,MAAMM,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IAChC,MAAMC,QAAQ,GAAGN,IAAI,CAACO,SAAS;;IAE/B;IACA,MAAMC,eAAe,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAE3C,IAAIL,GAAG,GAAGG,QAAQ,GAAGE,eAAe,EAAE;MACpCV,YAAY,CAACW,UAAU,CAAC,iBAAiB,CAAC;MAC1C,OAAO,KAAK;IACd;IAEA,OAAOT,IAAI,CAACJ,eAAe,KAAK,IAAI;EACtC,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAI;IACF,IAAI,CAAChB,eAAe,CAAC,CAAC,EAAE,OAAO,IAAI;IAEnC,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IACxD,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;IACjC,OAAOG,IAAI,CAACa,IAAI;EAClB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMI,MAAM,GAAGA,CAAA,KAAM;EAC1BhB,YAAY,CAACW,UAAU,CAAC,iBAAiB,CAAC;EAC1CX,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,WAAW,GAAGA,CAACC,YAAY,GAAG,GAAG,KAAK;EACjD,IAAI,CAACpB,eAAe,CAAC,CAAC,EAAE;IACtB;IACAE,YAAY,CAACmB,OAAO,CAAC,cAAc,EAAED,YAAY,CAAC;IAClD,OAAO,KAAK;EACd;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAML,IAAI,GAAGD,cAAc,CAAC,CAAC;EAC7B,IAAI,CAACC,IAAI,EAAE,OAAO,iBAAiB;EAEnC,MAAMM,IAAI,GAAG,IAAIf,IAAI,CAAC,CAAC,CAACgB,QAAQ,CAAC,CAAC;EAClC,IAAIC,YAAY,GAAG,OAAO;EAE1B,IAAIF,IAAI,GAAG,EAAE,EAAE;IACbE,YAAY,GAAG,cAAc;EAC/B,CAAC,MAAM,IAAIF,IAAI,GAAG,EAAE,EAAE;IACpBE,YAAY,GAAG,gBAAgB;EACjC,CAAC,MAAM;IACLA,YAAY,GAAG,cAAc;EAC/B;EAEA,MAAMC,SAAS,GAAGT,IAAI,CAACU,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACzC,OAAO,GAAGH,YAAY,KAAKC,SAAS,GAAG;AACzC,CAAC;AAED,eAAe;EACb1B,eAAe;EACfgB,cAAc;EACdE,MAAM;EACNC,WAAW;EACXG;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}